name: Digito deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PYTHON_VERSION: 3.8
  NODE_VERSION: 12.x
  NODE_ENV: production
  CI: true

  DOCKER_IMAGE_UI: jtalk/digito-ui
  DOCKER_IMAGE_API: jtalk/digito-api

  INFRA_APP: digito
  INFRA_REPOSITORY: Jtalk/jtalk.me-infrastructure
  INFRA_DEPLOY_WORKFLOW: Trigger version update for a service

jobs:
  build-release-ui:
    name: Build and Release to Docker
    runs-on: ubuntu-latest
    env:
      PUBLIC_URL: ""
      NODE_ENV: production
      REACT_APP_API_LOCATION: /api
    steps:
      - uses: actions/checkout@v1
      - name: Set up Node.JS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Test UI
        working-directory: digito-ui
        env:
          NODE_ENV: development
        run: |
          npm ci
          npm test src/
      - name: Build UI
        working-directory: digito-ui
        run: |
          npm ci
          npm run build
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.0.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: digito-ui
          repository: ${{ env.DOCKER_IMAGE }}
          tags: ${{ github.sha }}
          tag_with_ref: true
          tag_with_sha: false
          push: ${{ github.ref == 'refs/heads/master' }}

  build-release-api:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Build app
        working-directory: digito-api
        run: |
          pip install --user pipenv
          pipenv sync --dev
          pipenv run tests
      - name: Build and push Docker images
        uses: docker/build-push-action@v1.0.1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: digito-api
          repository: ${{ env.DOCKER_IMAGE }}
          tags: ${{ github.sha }}
          tag_with_ref: true
          tag_with_sha: false
          push: ${{ github.ref == 'refs/heads/master' }}

  build-release-helm:
    name: Build and publish the Helm chart
    runs-on: ubuntu-latest
    needs:
      - build-release-ui
      - build-release-api
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-helm@v1
      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: deploy
          target_dir: helm
          app_version: ${{ github.sha }}
          chart_version: 1.0.0-${{ github.sha }}

  deploy:
    name: Trigger the infrastructure deployment pipeline
    runs-on: ubuntu-latest
    needs:
      - build-release-helm
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Trigger deploy pipeline in the terraform repo
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: ${{ env.INFRA_DEPLOY_WORKFLOW }}
          repo: ${{ env.INFRA_REPOSITORY }}
          token: ${{ secrets.GH_PUSH_TOKEN }}
          inputs: '{ "name": "${{ env.INFRA_APP }}", "version": "${{ github.sha }}" }'
          ref: master
          wait-for-completion: true
          wait-for-completion-timeout: 10m
          wait-for-completion-interval: 30s

  verify-ui:
    name: Verify deployment
    runs-on: ubuntu-latest
    needs:
      - deploy-ui
      - deploy
    steps:
      - name: Verify the healthcheck URL
        run: |
          curl --fail https://digito.jtalk.me/

  verify-api:
    name: Verify deployment
    runs-on: ubuntu-latest
    needs:
      - deploy-api
      - deploy
    env:
      API_URL: https://digito.jtalk.me/api
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Verify the deployment
        working-directory: digito-api
        run: |
          pip install --user pipenv
          pipenv sync --dev
          pipenv run postdeploy
